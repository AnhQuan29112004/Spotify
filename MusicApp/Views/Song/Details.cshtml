
@model MusicApp.Models.DetailSongView
@{
    ViewBag.Title = "Details";
    bool isFavourite = ViewBag.FavouriteSongIds != null &&
                      ViewBag.FavouriteSongIds.Contains(Model.DetailSong.SongId);


}
@Scripts.Render("~/Scripts/global.js")

<!DOCTYPE html>
<html>
<head>
    <style>
  

        .play-btn:hover {
            background-color: #3be477 !important;
            cursor: pointer;
        }

        .like-btn:hover {
            color: #fff !important;
            cursor: pointer;
        }

        .artist-sec:hover {
            background-color: hsla(0, 0%, 100%, .1) !important;
            cursor: pointer;
        }

        .popular-track {
            padding: 5px 16px !important;
        }

            .popular-track:hover {
                background-color: hsla(0, 0%, 100%, .1) !important;
            }

        .custom-dropdown {
            background-color: #292929; /* Black background */
            color: #fff; /* White text */
            border: none; /* Remove border */
        }

            .custom-dropdown .dropdown-item {
                color: #fff; /* White text for each item */
                padding: 10px 20px; /* Adjust padding to match Spotify's look */
            }

                .custom-dropdown .dropdown-item:hover {
                    background-color: #333; /* Dark gray hover effect */
                    color: #1DB954; /* Spotify green color on hover */
                }
    </style>

</head>
<body>
    <div id="spotify-layout" class=" rounded-3 text-white col-12" style="background: #191414;overflow-y:auto; height:100%">
        <div class="pb-4 px-4 row g-0" style="display:flex;gap:10px;padding-top:6em;align-items:center;flex-wrap:wrap">
            <div class="col-md-3 justify-content-center align-items-center" style="display:flex">
                <img id="thumbnail" src="~/Public/Images/@Model.DetailSong.SongThumbnail" class="img-thumbnail img-fluid song-img"
                     style="height: 232px; width: 232px; box-shadow: 0 4px 60px rgba(0, 0, 0, .5);object-fit:contain" alt="..." />
            </div>
            <div style="display:flex;flex-direction:column;gap:10px" class="col-md-7">
                <div class="fw-bold fs-6">
                    Song
                </div>


                <div style="font-size: calc(3vw + 3vh + 2vmin); white-space: nowrap; width: 100%; font-weight: bold">
                    @Model.DetailSong.SongTitle
               

                </div>
                <div class="fw-bold fs-6">
                    @Model.DetailSong.SingerName
                    <span><i class="bi bi-dot"></i></span>
                    @Model.DetailSong.Duration
                    <span><i class="bi bi-dot"></i></span>
                    @Model.DetailSong.Views
                </div>
            </div>

        </div>
        <div class="p-5" style="background-color: rgba(25, 20, 20,0.2)">
            <div style="display:flex;gap:10px;padding:24px">
                <div id="toggle-button" class="rounded-circle play-btn" style="background-color:#1db954;height:56px;width:56px;display:flex;align-items:center;justify-content:center">
                    <i id="play-icon" class="bi bi-play-fill" style="color:black; font-size:28px; line-height:0;"></i>
                </div>
                @if (Session["user_id"] != null)
                {
                    <div style="height:56px;width:56px;display:flex;align-items:center;justify-content:center">
                        <i class="bi bi-three-dots like-btn" style="color:gray; font-size:28px; line-height:0;" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" id="dropdownMenuButton"></i>
                        @*DropdownMenu*@
                        <div class="dropdown-menu custom-dropdown" aria-labelledby="dropdownMenuButton">
                            <a class="dropdown-item" id="addPlaylist" style="display:flex;align-items:center;">
                                <span>
                                    <i class="bi bi-plus" style="font-size:28px"></i>
                                </span>
                                &nbsp;
                                Add to playlist
                            </a>
                            <a href="javascript:void(0);"
                               class="favorite-action dropdown-item"
                               data-url="@Url.Action(isFavourite ? "RemoveFromFavorite" : "AddToFavorite", "Song")"
                               data-song-id="@Model.DetailSong.SongId"
                               style="display: flex; align-items: center; cursor: pointer;">
                                <span>
                                    <i class="bi @(isFavourite ? "bi-heart-fill" : "bi-heart")" style="font-size:28px"></i>
                                </span>
                                &nbsp;
                                <span>@(isFavourite ? "Remove from Liked Songs" : "Add to Liked Songs")</span>
                            </a>
                            <a class="dropdown-item" style="display: flex; align-items: center;" href="@Url.Action("Download", "Song", new { fileName = Model.DetailSong.SongSrc })">
                                <span>
                                    <i class="bi bi-download" style="font-size:28px"></i>
                                </span>
                                &nbsp;
                                Download Song
                            </a>
                        </div>
                    </div>
                }
                </div>
            <div style="display:flex;gap:10px;flex-direction:column;padding:0px 24px">
                <div style="display:flex;gap:10px;align-items:center; " class="artist-sec p-2">
                    <div style="height:80px;width:80px">
                        <img id="thumbnail" src="@(!string.IsNullOrEmpty(Model.DetailSong.SingerThumbnailSrc) ? "/Public/Images/" + @Model.DetailSong.SingerThumbnailSrc : "/Public/Images/defaultSinger.png")" class="rounded-circle"
                             style="height: 100%; width: 100%; box-shadow: 0 4px 60px rgba(0, 0, 0, .5);object-fit:contain" alt="..." />
                    </div>
                    <div style="display:flex;flex-direction:column;gap:5px;" class="fw-bold fs-6">
                        <div>
                            Artist
                        </div>
                        <div>
                            <a href="~/Artist/DetailArtist/@Model.DetailSong.SingerUrl" style="text-decoration:none; color:white" class="inner-desc">
                                @Model.DetailSong.SingerName
                            </a>
                         
                        </div>
                    </div>
                </div>

            </div>

        </div>

    </div>

    <div class="modal fade" id="playlistModal" tabindex="-1" role="dialog" aria-labelledby="playlistModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="playlistModalLabel">Add to Playlist</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <select id="playlistSelect" class="form-control">
                        <option value="" disabled selected>Select a playlist</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="addToPlaylistButton">Add</button>
                </div>
            </div>
        </div>
    </div>


    <script>
        //Change background color based on thumbnail
        $(document).ready(function () {
            var colorThief = new ColorThief();
            var img = document.getElementById('thumbnail');
            img.setAttribute('crossOrigin', '');

            // When the image is loaded, extract the color
            $(img).on('load', function () {
                var result = colorThief.getColor(img);
                var rgbColor = 'rgb(' + result[0] + ',' + result[1] + ',' + result[2] + ')';
                console.log('run')
                // Apply the background gradient using the dominant color
                $('#spotify-layout').css('background', 'linear-gradient(180deg, ' + rgbColor + ' 0%, #191414 100%)');
            });

            // If the image is already loaded (in case of cached images)
            if (img.complete) {
                $(img).trigger('load');
            }
        });


        //Toggle play song btn on Track list
        $(document).ready(function () {
            let playingTrack = null; // Track the currently playing track element
            let playingButton = null; // Track the currently playing button

            // Toggle play song button
            $('#toggle-button').click(function () {
                var icon = $('#play-icon');

                // If there's a track currently playing, stop it first
                if (playingTrack !== null) {
                    $(playingTrack).removeClass('playing');
                    const originalIndex = $(playingTrack).data('original-index');
                    $(playingTrack).find('.track-index').text(originalIndex);
                    $(playingTrack).find('.col-3, .col-1').css('color', '#b3b3b3');
                    $(playingTrack).find('span').css('color', '#FFFFFF'); // Reset text color
                    playingTrack = null; // No track is currently playing
                }

                // Check the current icon and toggle it
                if (icon.hasClass('bi-play-fill')) {
                    icon.removeClass('bi-play-fill').addClass('bi-pause-fill'); // Change to pause icon
                    playingButton = this; // Mark this button as playing
                } else {
                    icon.removeClass('bi-pause-fill').addClass('bi-play-fill'); // Change back to play icon
                    playingButton = null; // No button is currently playing
                }
            });

        });


        function fetchPlaylists(searchTerm = "") {
            return fetch(`/Playlist/GetPlaylists?searchTerm=${encodeURIComponent(searchTerm)}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .catch(error => {
                    console.error('Error fetching playlists:', error);
                    throw error;
                });
        }

        function addSongToPlaylist(playlistId, songId) {
            return fetch('/Playlist/AddToPlaylist', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ playlistId, songId })
            })
                .then(response => response.json())
                .catch(error => {
                    console.error('Error adding song to playlist:', error);
                    throw error;
                });
        }



       document.addEventListener('DOMContentLoaded', () => {
           document.querySelector('#addPlaylist').addEventListener('click', function (e) {
        e.preventDefault();

        fetchPlaylists()
            .then(data => {
                if (data.success) {
                    const playlistSelect = document.getElementById('playlistSelect');
                    playlistSelect.innerHTML = '<option value="" disabled selected>Select a playlist</option>';


                    data.playlists.forEach(playlist => {
                        const option = document.createElement('option');
                        option.value = playlist.playlist_id;
                        option.textContent = playlist.name;
                        playlistSelect.appendChild(option);
                    });


                    $('#playlistModal').modal('show');
                } else {
                    alert('Failed to load playlists: ' + data.message);
                }
            })
            .catch(error => {
                alert('An error occurred while fetching playlists.');
            });
    });


      document.querySelector('#addToPlaylistButton').addEventListener('click', function () {
        const selectedPlaylistId = document.querySelector('#playlistSelect').value;
        const songId = JSON.parse('@Html.Raw(Json.Encode(Model.DetailSong.SongId))');

        if (selectedPlaylistId) {
            addSongToPlaylist(selectedPlaylistId, songId)
                .then(data => {
                    if (data.success) {
                        alert('Song added to playlist successfully!');
                    } else {
                        alert(data.message);
                    }

                    $('#playlistModal').modal('hide');
                })
                .catch(error => {
                    alert('Failed to add song to playlist: ' + error.message);
                });
        } else {
            alert('Please select a playlist.');
        }
    });
});



        $(document).ready(function () {
        // Store the current song ID
            const $toggleButton = $('#toggle-button');
            const test = $('#musicPlayerFooter');
            currentSongId = null;


    $toggleButton.click(function () {
        // Get song details from data attributes
        const songTitle = @Html.Raw(Json.Encode(Model.DetailSong.SongTitle));
        const artistName = @Html.Raw(Json.Encode(Model.DetailSong.SingerName));
        const albumArt = @Html.Raw(Json.Encode(Model.DetailSong.SongThumbnail));
        const songSrc = @Html.Raw(Json.Encode(Model.DetailSong.SongSrc));
        const songId = @Html.Raw(Json.Encode(Model.DetailSong.SongId)); // Unique ID for the song

        const songData = {
            id: songId,
            title: songTitle,
            artist: artistName,
            albumArt: albumArt,
            src: songSrc
        };
        console.log('run stored')

        // Check if the song has been played in this session
        const playedSongs = JSON.parse(sessionStorage.getItem('playedSongs')) || [];

        if (!playedSongs.includes(songId)) {
            // First time clicking this song in the session
            console.log('First click detected for song:', songId);
            playedSongs.push(songId);
            sessionStorage.setItem('playedSongs', JSON.stringify(playedSongs));

            // Increase song views in the database
            $.ajax({
                url: '@Url.Action("IncreaseView", "Song")', // Your API endpoint for increasing views
                type: 'POST',
                data: { songId: songId },
                success: function (response) {
                    console.log('Song views increased:', response);
                },
                error: function (error) {
                    console.error('Error increasing song views:', error);
                }
            });
        }

        // Check if the same song is already playing in the footer
        if (songId === currentSongId && audio.paused === false) {
            // Pause if the song is already playing
            $(document).trigger('pauseSong');
            $toggleButton.find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');
        } else if (songId === currentSongId && audio.paused === true) {
            $(document).trigger('playSong');
            $toggleButton.find('i').removeClass('bi-playe-fill').addClass('bi-pause-fill');
        }
        else
        {
            // Play the song and update footer

            sessionStorage.setItem('currentSong', JSON.stringify(songData));
            sessionStorage.setItem('currentTime', 0);
            currentSongId = songId;
            $toggleButton.find('i').removeClass('bi-playe-fill').addClass('bi-pause-fill');
            $(document).trigger('playSongFirst');
            console.log('runinto sess',sessionStorage.getItem('currentSong'));
        }
    });

    // Listen for play/pause updates from the footer player to sync button states
    $(document).on('footerSongPaused', function () {
        $toggleButton.find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');
    });

    $(document).on('footerSongPlaying', function () {
        $toggleButton.find('i').removeClass('bi-play-fill').addClass('bi-pause-fill');
    });
});



        $(document).on('click', '.favorite-action', function (event) {
            event.preventDefault();

            const $link = $(this);
            const url = $link.data('url');
            const songId = $link.data('song-id');

            $.ajax({
                url: url,
                type: 'POST',
                data: { songId: songId },
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                    } else {
                        alert(response.message || 'An error occurred.');
                    }
                },
                error: function () {
                    alert('An error occurred while processing your request.');
                }
            });
        });




    </script>
</body>
</html>
