
@model MusicApp.Models.DetailSongView
@{
    ViewBag.Title = "Details";
    int trackIndex = 1;
}
@Scripts.Render("~/Scripts/global.js")

<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: 'Helvetica', 'Arial', sans-serif;
            color: #444444;
            font-size: 9pt;
            /*            background-color: #FAFAFA;*/
        }

        .play-btn:hover {
            background-color: #3be477 !important;
            cursor: pointer;
        }

        .like-btn:hover {
            color: #fff !important;
            cursor: pointer;
        }

        .artist-sec:hover {
            background-color: hsla(0, 0%, 100%, .1) !important;
            cursor: pointer;
        }

        .popular-track {
            padding: 5px 16px !important;
        }

            .popular-track:hover {
                background-color: hsla(0, 0%, 100%, .1) !important;
            }

        .custom-dropdown {
            background-color: #292929; /* Black background */
            color: #fff; /* White text */
            border: none; /* Remove border */
        }

            .custom-dropdown .dropdown-item {
                color: #fff; /* White text for each item */
                padding: 10px 20px; /* Adjust padding to match Spotify's look */
            }

                .custom-dropdown .dropdown-item:hover {
                    background-color: #333; /* Dark gray hover effect */
                    color: #1DB954; /* Spotify green color on hover */
                }
    </style>

</head>
<body>
    <div id="spotify-layout" class=" rounded-3 text-white col-12" style="background: #191414;overflow-y:auto; height:100%">
        <div class="pb-4 px-4 row g-0" style="display:flex;gap:10px;padding-top:6em;align-items:end;flex-wrap:wrap">
            <div class="col-md-3 justify-content-center align-items-center" style="display:flex">
                <img id="thumbnail" src="~/Public/Images/@Model.DetailSong.SongThumbnail" class="img-thumbnail img-fluid song-img"
                     style="height: 232px; width: 232px; box-shadow: 0 4px 60px rgba(0, 0, 0, .5);object-fit:contain" alt="..." />
            </div>
            <div style="display:flex;flex-direction:column;gap:10px" class="col-md-7">
                <div class="fw-bold fs-6">
                    Song
                </div>
                <div style="font-size: calc(3vw + 3vh + 2vmin); white-space: nowrap; width: 100%; font-weight: bold">
                    @Model.DetailSong.SongTitle
                </div>
                <div class="fw-bold fs-6">
                    @Model.DetailSong.SingerName
                    <span><i class="bi bi-dot"></i></span>
                    @Model.DetailSong.Duration
                    <span><i class="bi bi-dot"></i></span>
                    @Model.DetailSong.Views
                </div>
            </div>

        </div>
        <div class="p-5" style="background-color: rgba(25, 20, 20,0.2)">
            <div style="display:flex;gap:10px;padding:24px">
                <div id="toggle-button" class="rounded-circle play-btn" style="background-color:#1db954;height:56px;width:56px;display:flex;align-items:center;justify-content:center">
                    <i id="play-icon" class="bi bi-play-fill" style="color:black; font-size:28px; line-height:0;"></i>
                </div>
                <div style="height:56px;width:56px;display:flex;align-items:center;justify-content:center">
                    <i class="bi bi-plus-circle like-btn" style="color:gray; font-size:28px; line-height:0;"></i>
                </div>
                <div style="height:56px;width:56px;display:flex;align-items:center;justify-content:center">
                    <i class="bi bi-three-dots like-btn" style="color:gray; font-size:28px; line-height:0;" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" id="dropdownMenuButton"></i>
                    @*DropdownMenu*@
                    <div class="dropdown-menu custom-dropdown" aria-labelledby="dropdownMenuButton">
                        <a class="dropdown-item" href="#" style="display:flex;align-items:center;">
                            <span>
                                <i class="bi bi-plus" style="font-size:28px"></i>
                            </span>
                            &nbsp;
                            Add to playlist
                        </a>
                        <a class="dropdown-item" href="#" style="display: flex; align-items: center;">
                            <span>
                                <i class="bi bi-heart" style="font-size:28px"></i>
                            </span>
                            &nbsp;
                            Add to Liked Songs
                        </a>
                    </div>
                </div>
            </div>
            <div style="display:flex;gap:10px;flex-direction:column;padding:0px 24px">
                <div style="display:flex;gap:10px;align-items:center; " class="artist-sec p-2">
                    <div style="height:80px;width:80px">
                        <img id="thumbnail" src="https://i.scdn.co/image/ab67616d0000b273730cc8eb459c92944233e891" class="rounded-circle"
                             style="height: 100%; width: 100%; box-shadow: 0 4px 60px rgba(0, 0, 0, .5);object-fit:contain" alt="..." />
                    </div>
                    <div style="display:flex;flex-direction:column;gap:5px;" class="fw-bold fs-6">
                        <div>
                            Artist
                        </div>
                        <div>
                            @Model.DetailSong.SingerName
                        </div>
                    </div>
                </div>

            </div>
            <div style="display:flex;flex-direction:column;gap:5px;padding:24px;">
                <div style="color: #b3b3b3">
                    Popular Tracks by
                </div>
                <h3>
                    @Model.DetailSong.SingerName
                </h3>
                <div>
                    @foreach (var song in Model.PopularSongs)
                    {
                        <div class="row g-0 popular-track" style="font-size:1rem;display:flex;align-items:center;">
                            <div class="col-11 col-sm-8" style="display:flex;gap:16px;align-items:center">
                                <div style="color: #b3b3b3" class="track-index">
                                    @trackIndex
                                </div>
                                <div style="height:40px;width:40px">
                                    <img id="thumbnail" src="~/Public/Images/@song.SongThumbnail" class="rounded-1"
                                         style="height: 100%; width: 100%;" alt="..." />
                                </div>
                                <span>@song.SongTitle</span>
                            </div>
                            <div class="col-3 d-none d-sm-block" style="color: #b3b3b3">
                                @song.Views
                            </div>
                            <div class="col-1" style="color: #b3b3b3">
                                @song.Duration
                            </div>
                        </div>
                        trackIndex++;
                    }


                </div>

            </div>
        </div>

    </div>


    <script>
        //Change background color based on thumbnail
        $(document).ready(function () {
            var colorThief = new ColorThief();
            var img = document.getElementById('thumbnail');
            img.setAttribute('crossOrigin', '');

            // When the image is loaded, extract the color
            $(img).on('load', function () {
                var result = colorThief.getColor(img);
                var rgbColor = 'rgb(' + result[0] + ',' + result[1] + ',' + result[2] + ')';
                console.log('run')
                // Apply the background gradient using the dominant color
                $('#spotify-layout').css('background', 'linear-gradient(180deg, ' + rgbColor + ' 0%, #191414 100%)');
            });

            // If the image is already loaded (in case of cached images)
            if (img.complete) {
                $(img).trigger('load');
            }
        });


        //Toggle play song btn on Track list
        $(document).ready(function () {
            let playingTrack = null; // Track the currently playing track element
            let playingButton = null; // Track the currently playing button

            // Toggle play song button
            $('#toggle-button').click(function () {
                var icon = $('#play-icon');

                // If there's a track currently playing, stop it first
                if (playingTrack !== null) {
                    $(playingTrack).removeClass('playing');
                    const originalIndex = $(playingTrack).data('original-index');
                    $(playingTrack).find('.track-index').text(originalIndex);
                    $(playingTrack).find('.col-3, .col-1').css('color', '#b3b3b3');
                    $(playingTrack).find('span').css('color', '#FFFFFF'); // Reset text color
                    playingTrack = null; // No track is currently playing
                }

                // Check the current icon and toggle it
                if (icon.hasClass('bi-play-fill')) {
                    icon.removeClass('bi-play-fill').addClass('bi-pause-fill'); // Change to pause icon
                    playingButton = this; // Mark this button as playing
                } else {
                    icon.removeClass('bi-pause-fill').addClass('bi-play-fill'); // Change back to play icon
                    playingButton = null; // No button is currently playing
                }
            });

            // Hover event to change index to play icon
            $('.popular-track').hover(function () {
                if (!$(this).hasClass('playing')) {
                    const originalIndex = $(this).find('.track-index').text();
                    $(this).data('original-index', originalIndex);
                    $(this).find('.track-index').html('<i class="bi bi-play-fill"></i>'); // Show play icon
                }
            }, function () {
                if (!$(this).hasClass('playing')) {
                    const originalIndex = $(this).data('original-index');
                    $(this).find('.track-index').text(originalIndex);
                }
            });

            // Click event to toggle play/pause for track
            $('.popular-track').click(function () {
                // If the clicked track is already playing, pause it
                if ($(this).hasClass('playing')) {
                    $(this).removeClass('playing');
                    const originalIndex = $(this).data('original-index');
                    $(this).find('.track-index').text(originalIndex);
                    $(this).find('.col-3, .col-1').css('color', '#b3b3b3');
                    $(this).find('span').css('color', '#FFFFFF'); // Reset text color
                    playingTrack = null; // No track is currently playing

                    // Revert the button's icon if the toggle button is also playing
                    if (playingButton !== null) {
                        $('#play-icon').removeClass('bi-pause-fill').addClass('bi-play-fill');
                        playingButton = null;
                    }
                } else {
                    // Pause any currently playing track before starting a new one
                    if (playingTrack !== null) {
                        $(playingTrack).removeClass('playing');
                        const originalIndex = $(playingTrack).data('original-index');
                        $(playingTrack).find('.track-index').text(originalIndex);
                        $(playingTrack).find('.col-3, .col-1').css('color', '#b3b3b3');
                        $(playingTrack).find('span').css('color', '#FFFFFF');
                    }

                    // Pause the toggle button if it is playing
                    if (playingButton !== null) {
                        $('#play-icon').removeClass('bi-pause-fill').addClass('bi-play-fill'); // Revert the button's icon
                        playingButton = null;
                    }

                    // Play the clicked track
                    const originalIndex = $(this).data('original-index');
                    $(this).addClass('playing'); // Mark this track as playing
                    $(this).find('.track-index').html('<i class="bi bi-pause-fill" style="color: #1db954;"></i>'); // Show pause icon
                    $(this).find('span, .col-3, .col-1').css('color', '#1db954'); // Change text color to green

                    playingTrack = this; // Set this as the currently playing track
                }
            });
        });


        $(document).ready(function () {
        // Store the current song ID
            const $toggleButton = $('#toggle-button');
            const test = $('#musicPlayerFooter');
            currentSongId = null;


    $toggleButton.click(function () {
        // Get song details from data attributes
        const songTitle = @Html.Raw(Json.Encode(Model.DetailSong.SongTitle));
        const artistName = @Html.Raw(Json.Encode(Model.DetailSong.SingerName));
        const albumArt = @Html.Raw(Json.Encode(Model.DetailSong.SongThumbnail));
        const songSrc = @Html.Raw(Json.Encode(Model.DetailSong.SongSrc));
        const songId = @Html.Raw(Json.Encode(Model.DetailSong.SongId)); // Unique ID for the song


        // Check if the same song is already playing in the footer
        if (songId === currentSongId && audio.paused === false) {
            // Pause if the song is already playing
            $(document).trigger('pauseSong');
            $toggleButton.find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');
        } else {
            // Play the song and update footer
            $(document).trigger('playSong', {
                id: songId,
                title: songTitle,
                artist: artistName,
                albumArt: albumArt,
                src: songSrc
            });
            currentSongId = songId;
            $toggleButton.find('i').removeClass('bi-playe-fill').addClass('bi-pause-fill');
        }
    });

    // Listen for play/pause updates from the footer player to sync button states
    $(document).on('footerSongPaused', function () {
        $toggleButton.find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');
    });

    $(document).on('footerSongPlaying', function () {
        $toggleButton.find('i').removeClass('bi-play-fill').addClass('bi-pause-fill');
    });
});






    </script>
</body>
</html>
